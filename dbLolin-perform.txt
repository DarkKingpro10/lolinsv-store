--Usuarios Clientes--
--Usuarios Admins--
--Admins--
--Estados--
create table estados(
	id_estados serial not null,
	estado varchar(150) not null unique,
	CONSTRAINT estados_pk PRIMARY KEY(id_estados)
);

CREATE TABLE admins(
	id_admin serial NOT null,
	nombre_admin varchar(100) NOT null,
	apellido_admin varchar(100) not null,
	usuario varchar(100) NOT NULL unique,
	contrasena varchar(500) NOT NULL,
	constraint admins_pk primary key(id_admin)
);
alter table admins add column fk_id_estado int;--Añadiendo el campo 
alter table admins alter column fk_id_estado set default 8;--Añadiendo el default a la tabla
alter table admins add constraint admins_fk foreign key (fk_id_estado) references estados(id_estados) on update cascade on delete cascade;
--Cliente--
CREATE TABLE clientes(
	id_cliente serial,
	nombre_cliente varchar(100) not null,
	apellido_cliente varchar(100) not null,
	correo_cliente varchar(100) not null unique,
	dui_cliente varchar(10) not null unique,
	telefono_cliente varchar(9) not null unique,
	direccion_cliente varchar(500) not null,
	usuario varchar(100) NOT NULL unique,
	contrasena varchar(500) NOT NULL,
	constraint cliente_pk primary key(id_Cliente)
);

alter table clientes add column fk_id_estado int;--Añadiendo el campo 
alter table clientes alter column fk_id_estado set default 8;--Añadiendo el default a la tabla
alter table clientes add constraint clientes_fk foreign key (fk_id_estado) references estados(id_estados) on update cascade on delete cascade;
--Tamaños--
create table tamanos(
	id_tamanos serial not null,
	tamano varchar(150) not null unique,
	CONSTRAINT tamanos_pk PRIMARY KEY(id_tamanos)
);
--Pedidos Personalizados
CREATE TABLE pedidos_personalizados(
	id_pedidos_personalizado serial NOT NULL,
	fecha_pedidopersonal date default current_date NOT NULL,
	descripcion_pedidopersonal varchar(500) NOT NULL,
	imagenejemplo_pedidopersonal varchar(500) NOT NULL,
	descripcionlugar_entrega varchar(500)NOT NULL,
	fk_id_cliente integer NOT NULL,
	fk_id_tamano integer NOT NULL,
	fk_id_estado integer NOT NULL default 1,
	CONSTRAINT pedidos_personalizados_pk PRIMARY KEY (id_pedidos_personalizado),
	CONSTRAINT pedidos_personalizados_clientes_fk FOREIGN KEY (fk_id_cliente) REFERENCES clientes(id_cliente) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT pedidos_personalizados_tamanos_fk FOREIGN KEY (fk_id_tamano) REFERENCES tamanos(id_tamanos) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT pedidos_personalizados_estados_fk FOREIGN KEY (fk_id_estado) REFERENCES estados(id_estados) ON UPDATE CASCADE ON DELETE CASCADE
);
--Por si acaso
alter table pedidos_personalizados alter column fecha_pedidopersonal set default current_date;--Añadiendo el default a la tabla

--Pedidos Establecidos
create table pedidos_establecidos(
	id_pedidos_establecidos serial not null,
	fecha_pedidoesta date default current_date not null,
	descripcionlugar_entrega varchar(500) not null,
	montototal_pedidoesta numeric(6,2) not null,
	fk_id_cliente int not null,
	fk_id_estado int not null default 7,
	constraint pedidosesta_pk primary key (id_pedidos_establecidos),
	constraint pedidosesta_clientes_fk foreign key (fk_id_cliente) references clientes(id_cliente) on update cascade on delete cascade,
	constraint pedidosesta_estados_fk foreign key (fk_id_estado) references estados(id_estados) on update cascade on delete cascade
);

--Por si acaso
alter table pedidos_establecidos alter column fecha_pedidoesta set default current_date;--Añadiendo el default a la tabla

--Categorias--
create table categorias(
	id_categoria serial NOT NULL,
	nombre_categoria varchar(100) not null unique,
	CONSTRAINT categorias_pk PRIMARY KEY (id_categoria)
);
alter table categorias add column fk_id_estado int;--Añadiendo el campo 
alter table categorias alter column fk_id_estado set default 4;--Añadiendo el default a la tabla
alter table categorias add constraint categorias_fk foreign key (fk_id_estado) references estados(id_estados) on update cascade on delete cascade;
--Valoracion--
create table valoraciones(
	id_valoraciones serial NOT NULL,
	valoraciones int not null unique,
	CONSTRAINT valoraciones_pk PRIMARY KEY (id_valoraciones)
);
--Productos--
CREATE table productos(
	id_producto serial NOT NULL,
	nombre_producto varchar(150)  NOT NULL unique,
	imagen_producto varchar(500)  NOT NULL,
	precio_producto numeric(6,2) NOT NULL,
	cantidad integer NOT NULL,
	descripcion varchar(150),
	fk_id_categoria integer NOT NULL,
	fk_id_valoraciones integer NOT NULL,
	fk_id_admin integer NOT NULL,
	CONSTRAINT productos_pk PRIMARY KEY (id_producto),
	CONSTRAINT productos_categorias_fk FOREIGN KEY (fk_id_categoria) REFERENCES categorias(id_categoria) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT productos_valoraciones_fk FOREIGN KEY (fk_id_valoraciones) REFERENCES valoraciones(id_valoraciones) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT productos_admin_fk FOREIGN KEY (fk_id_admin) REFERENCES admins(id_admin) ON UPDATE CASCADE ON DELETE CASCADE
);
--Detalle Pedido Establecido--
create table detallepedidos_establecidos(
	id_detalle_pedidos serial not null,
	cantidad_detallep int not null,
	subtotal_detallep numeric(6,2) not null,
	fk_id_producto int not null,
	fk_id_pedidos_establecidos int not null,
	constraint detallepedidos_pk primary key (id_detalle_pedidos),
	constraint detallepedidos_productos_fk foreign key (fk_id_producto) references productos(id_producto) on update cascade on delete cascade,
	constraint detallepedidos_pedidosesta_fk foreign key (fk_id_pedidos_establecidos) references pedidos_establecidos(id_pedidos_establecidos) on update cascade on delete cascade
);
--Valoraciones Clientes--
CREATE TABLE valoraciones_clientes(
	id_valoracionescli serial NOT NULL,
	comentario varchar(500) NOT NULL,
	fk_id_cliente integer NOT NULL,
	fk_id_productos integer NOT NULL,
	fk_id_valoraciones integer NOT NULL,
	CONSTRAINT valoraciones_clientes_pk PRIMARY KEY (id_valoracionescli),
	CONSTRAINT valoraciones_cliente_fk FOREIGN KEY (fk_id_cliente) REFERENCES clientes (id_cliente) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT valoraciones_clientes_productos_fk FOREIGN KEY (fk_id_productos) REFERENCES productos(id_producto) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT valoraciones_clientes_valoraciones_fk FOREIGN KEY (fk_id_valoraciones) REFERENCES valoraciones(id_valoraciones) ON UPDATE CASCADE ON DELETE CASCADE
);
--Inventario
create table inventario(
	id_inventario serial not null,
	cantidada int not null,
	cantidadn int not null,
	modificado boolean not null,
	fecha date default current_date,
	fk_id_admin int not null,
	fk_id_producto int not null,
	constraint inventario_pk primary key (id_inventario),
	constraint inventario_admins_fk foreign key (fk_id_admin) references admins(id_admin) on update cascade on delete cascade,
	constraint inventario_productos_fk foreign key (fk_id_producto) references productos(id_producto) on update cascade on delete cascade
);

--inserts
--Insert de las tablas--
--Estados--
truncate table estados RESTART IDENTITY cascade;--Reiniciando id en caso sea necesario--

Insert into estados (estado)
values ('Pendiente'),
('Enviado'),
('Agotado'),
('Disponible'),
('Negado'),
('Aceptado'),
('Comprando'),
('Activo'),
('Bloqueado'),
('Eliminado');

select * from estados;--comprobación
--Administradores--
truncate table admins RESTART IDENTITY cascade;--Reiniciando id en caso sea necesario--

Insert into admins (nombre_admin, apellido_admin, usuario, contrasena)
values ('Jesus', 'Esquivel', 'JesusEs', 'Jesus123'),
('Josue', 'Aleman', 'AlemanJos', 'Aleman2246'),
('Isabel', 'Martinez', 'IsabelM', 'IsabeJM'),
('Jonathan', 'Grande', 'JonthanR', 'Grande46'),
('Heber', 'Cornejo', 'CornejoHb', 'Heber2791');

select * from admins;--Comprobar--
--Categoria--
truncate table categorias RESTART IDENTITY cascade;--Reiniciando id en caso sea necesario--

Insert into categorias (nombre_categoria) values
('Animales'),
('Personajes'),
('Caricatura'),
('Videojuegos'),
('Plantas'),
('Accesorio para humano'),
('Anime'),
('Decoración de oficina'),
('Florales'),
('Película'),
('Artista');

select * from categorias;--Comprobar--
--Valoraciones--
truncate table valoraciones RESTART IDENTITY cascade;--Reiniciando id en caso sea necesario--

Insert into valoraciones (valoraciones)
values (1),
(2),
(3),
(4),
(5);

select * from valoraciones;--comprobación
--Tamaños--
truncate table tamanos RESTART IDENTITY cascade;--Reiniciando id en caso sea necesario--

Insert into tamanos(tamano)
values ('Grande:21cm a 35cm'),
('Mediano:13cm a 20cm'),
('Pequeño:12cm o menos');

select * from tamanos;--comprobación
--Clientes--
truncate table clientes RESTART IDENTITY cascade;--Reiniciando id en caso sea necesario--

INSERT INTO clientes (nombre_cliente, apellido_cliente, correo_cliente, dui_cliente, 
telefono_cliente, direccion_cliente, usuario, contrasena)values
('Carlos', 'Fuentes', 'CarlosFfu@gmail.com', '09452339-3', '7327-7323', 'DOMICILIO 
CONOCIDO', 'Fuentesc82', '876120'),--1--
('Sara', 'Pinar', 'Valentina.Ros37@gmail.com', '98373359-3', '7087-2455', 'AV.
GUADALUPE S/N', 'Valentina.Ros37', '098475'),--2--
('Martín', 'Acosta', 'Óscar.Ren34@gmail.com', '98072540-5', '6078-2340', 'AVENIDA 
NIÑOS HEROES NO. 3', 'Óscar.Ren34', '805235'),--3--
('Gabriela', 'Torre', 'Sara.Pin96@gmail.com', '09287455-4', '6976-3094', 'CARRETERA 
MEXICO-LAREDO KM.125', 'Sara.Pin96', '101345'),--4--
('Matías', 'Rincón', 'Efraín.Mej52@gmail.com', '10946555-8', '7623-9054', 'PLAZA 
CONSTITUCION NO. 1', 'Efraín.Mej52', '398360'),--5--
('Manuela', 'Hincapié', 'Julieta.Leó07@gmail.com', '67685809-9', '7726-0832', 
'DOMICILIO CONOCIDO', 'Julieta.Leó07', '087345'),--6--
('Sebastián', 'Yepes', 'Martín.Aco68@gmail.com', '08207945-7', '7234-5999', 
'CARRETERA MEXICO-LAREDO', 'Martín.Aco68', '089367'),--7--
('Sofía', 'Arango', 'Gabriela.Tor11@gmail.com', '90827633-3', '7980-2387', 'AVENIDA 
MIGUEL HIDALGO S/N', 'Gabriela.Tor11', '098734'),--8--
('Ana', 'Peña', 'Matías.Rin93@gmail.com', '98745067-1', '7107-2044', 'CARRETERA SAN 
SALVADOR SAN MIGUEL K', 'Matías.Rin93', '309i94'),--9--
('Mónica', 'Mendoza', 'Manuela.Hin07@gmail.com', '97605629-9', '6657-3924', 'AV. 16 
DE JULIO S/N', 'Manuela.Hin07', 'a09843');--10--

select * from clientes;--comprobación

--Triggers necesarios

--Trigger para actualizar la cantidad del producto luego de insertar en la tabla de inventario
CREATE FUNCTION actualizarcantidadprdi() RETURNS TRIGGER
AS
$$
DECLARE 
--Declaramos las variables
idmax int:=(SELECT MAX(id_inventario) FROM inventario);
idprd int:=(SELECT fk_id_producto FROM inventario 
			   WHERE id_inventario=idmax);
cantprd int:=(SELECT cantidadn FROM inventario 
		  WHERE id_inventario = idmax);
BEGIN
--Indicamos el procedimiento a realizar
UPDATE productos SET cantidad=cantidad+cantprd 
WHERE id_producto=idprd;
RETURN NEW;
END
$$
LANGUAGE plpgsql;--Final del la función del trigger

--Inicio del trigger
CREATE TRIGGER tr_actualizarCPI AFTER INSERT ON inventario
FOR EACH ROW
EXECUTE PROCEDURE actualizarcantidadprdi();--Final del Trigger

--Cada vez que se añada un detalle a un pedido la cantidad del producto se le restará a 
--la cantidad del producto en la tabla de productos
--Primero se ejecuta la función que el trigger realizara
CREATE FUNCTION actualizarCantidadProdct() RETURNS TRIGGER
AS
$$
DECLARE 
--Declaramos las variables
idmax int:=(SELECT MAX(id_detalle_pedidos) FROM detallepedidos_establecidos);
ctr int:=(SELECT cantidad_detallep FROM detallepedidos_establecidos 
		  WHERE id_detalle_pedidos=idmax);
idprd int:=(SELECT fk_id_producto FROM detallepedidos_establecidos 
			   WHERE id_detalle_pedidos=idmax);
BEGIN
--Indicamos el procedimiento a realizar
UPDATE productos SET cantidad=cantidad-ctr WHERE id_producto=idprd;
RETURN NEW;
END
$$
LANGUAGE plpgsql;--Final del la función del trigger
--Inicio del trigger
CREATE TRIGGER tr_actualizarcantidadprd AFTER INSERT ON detallepedidos_establecidos
FOR EACH ROW
EXECUTE PROCEDURE actualizarCantidadProdct();--Final del Trigger

--Primero se ejecuta la función que el trigger realizara
CREATE FUNCTION actualizarMontoPedido() RETURNS TRIGGER
AS
$$
DECLARE 
--Declaramos las variables
idmax int:=(SELECT MAX(id_detalle_pedidos) FROM detallepedidos_establecidos);
idpedido int:=(SELECT fk_id_pedidos_establecidos FROM detallepedidos_establecidos 
			   WHERE id_detalle_pedidos=idmax);
preciot numeric(6,2):=(SELECT SUM(subtotal_detallep) FROM detallepedidos_establecidos
					  WHERE fk_id_pedidos_establecidos=idpedido);
BEGIN
--Indicamos el procedimiento a realizar
perform * from actualizarSubtotalf();
UPDATE pedidos_establecidos 
SET montototal_pedidoesta = (SELECT SUM(subtotal_detallep) FROM detallepedidos_establecidos WHERE fk_id_pedidos_establecidos = idpedido) 
WHERE id_pedidos_establecidos=idpedido;
RETURN NEW;
END
$$
LANGUAGE plpgsql;--Final del la función del trigger
--Inicio del trigger
CREATE TRIGGER tr_actualizarmonto AFTER INSERT ON detallepedidos_establecidos
FOR EACH ROW
EXECUTE PROCEDURE actualizarMontoPedido();--Final del Trigger

--TRIGGER DE ACTUALIZAR EL SUBTOTAL del detalle del producto de acuerdo a la cantidad del producto que se ingrese
--TRIGGERS
--Que actualice el subtotal de cada detalle del pedido luego de cada insert en el detalle de dicho 
--pedido Se calculará su subtotal automaticamente
--Primero se ejecuta la función que el trigger realizara
CREATE FUNCTION actualizarSubtotal() RETURNS TRIGGER
AS
$$
DECLARE 
--Declaramos las variables
idmax int:=(SELECT MAX(id_detalle_pedidos) FROM detallepedidos_establecidos);
cant int:=(SELECT cantidad_detallep FROM detallepedidos_establecidos 
			   WHERE id_detalle_pedidos=idmax);
idprd int:= (SELECT fk_id_producto FROM detallepedidos_establecidos WHERE id_detalle_pedidos=idmax);
preciop numeric(6,2):=(SELECT precio_producto FROM productos
					  WHERE id_producto=idprd);
subt numeric(6,2):= (SELECT preciop*cant);
BEGIN
--Indicamos el procedimiento a realizar
UPDATE detallepedidos_establecidos SET subtotal_detallep=subt WHERE id_detalle_pedidos=idmax;
RETURN NEW;
END
$$
LANGUAGE plpgsql;--Final del la función del trigger
--Inicio del trigger
CREATE TRIGGER tr_actualizarsubtotal AFTER INSERT ON detallepedidos_establecidos
FOR EACH ROW
EXECUTE PROCEDURE actualizarSubtotal();--Final del Trigger

--Primero se ejecuta la función que el trigger realizara
CREATE FUNCTION actualizarValoracion() RETURNS TRIGGER
AS
$$
DECLARE 
--Declaramos las variables
idmax int:=(select max(id_valoracionescli)from valoraciones_clientes);
idpt int:=(select fk_id_productos from valoraciones_clientes where id_valoracionescli=idmax);
idv1 int:=(select count(fk_id_valoraciones) as total from valoraciones_clientes 
		   where fk_id_productos = idpt and fk_id_valoraciones =1);
idv2 int:=(select count(fk_id_valoraciones) as total from valoraciones_clientes 
		   where fk_id_productos = idpt and fk_id_valoraciones =2);
idv3 int:=(select count(fk_id_valoraciones) as total from valoraciones_clientes 
		   where fk_id_productos = idpt and fk_id_valoraciones =3);
idv4 int:=(select count(fk_id_valoraciones) as total from valoraciones_clientes 
		   where fk_id_productos = idpt and fk_id_valoraciones =4);
idv5 int:=(select count(fk_id_valoraciones) as total from valoraciones_clientes 
		   where fk_id_productos = idpt and fk_id_valoraciones =5);
idv int:=3;
BEGIN
--Indicamos el procedimiento a realizar
case --Colocamos el valor en  cada caso
when (idv1>idv2 and idv1>idv3 and idv1>idv4 and idv1>idv5) then
	idv=1;
when (idv2>idv1 and idv2>idv3 and idv2>idv4 and idv2>idv5) then
	idv=2;
when (idv3>idv2 and idv3>idv1 and idv3>idv4 and idv3>idv5) then
	idv=3;
when (idv4>idv2 and idv4>idv3 and idv4>idv1 and idv4>idv5) then
	idv=4;
when (idv5>idv2 and idv5>idv3 and idv5>idv4 and idv5>idv1) then
	idv=5;
end case;
UPDATE productos SET fk_id_valoraciones=idv WHERE id_producto=idpt;
RETURN NEW;
END
$$
LANGUAGE plpgsql;--Final del la función del trigger
--Inicio del trigger
CREATE TRIGGER tr_actualizarvaloracion AFTER INSERT ON valoraciones_clientes
FOR EACH ROW
EXECUTE PROCEDURE actualizarValoracion();--Final del Trigger

